package org.spotify.client;

import io.grpc.Channel;
import org.spotify.grpc.*;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class SpotifyClient {
    @SuppressWarnings("unused")
    private final SpotifyConnection spotifyConnection;

    @SuppressWarnings("unused")
    public SpotifyClient(Channel channel) {
        this.spotifyConnection = new SpotifyConnection(channel);
    }

    public SpotifyClient() throws SpotifyClientException {
        this.spotifyConnection = new SpotifyConnection();
    }

    public String displayPlaylist(int[] playlist) throws SpotifyClientException {
        // TODO: Implement displayPlaylist
        if (playlist == null || playlist.length == 0) {
            return "";
        }
        // Create stub
        // stub is a helper object generated by gRPC
        // stub acts a client's remote controller
        MetadataServiceGrpc.MetadataServiceBlockingStub stub =
                MetadataServiceGrpc.newBlockingStub(
                        spotifyConnection.getStub().getChannel()
                );
        // MetadataServiceBlockingStub: wait (block) until server responses
        // MetadataServiceStub: return immediately, response come later

        // Convert the playList array into list
        List<Integer> trackListIds
                = Arrays.stream(playlist)   // Arrays.stream is for array only. If playlist is a List or Set, we can use playList.stream().
                .boxed()                    // convert primitive datatype (int) into Object (Integer)
                .toList();                  // convert stream into List

        // EntitiesRequest is a message that includes all tracks
        // It is a message to the server that client requires something
        EntitiesRequest request = EntitiesRequest   // EntitiesRequest is a message type generated from your .proto file
                .newBuilder()           // a static method that gives you a builder object to construct the message
                .addAllId(trackListIds) // a method from the builder to fill the list of ids (repeated int32 id = 1)
                .build();               // a method to creates final EntitiesRequest object

        // Make the gRPC call
        // Define tracks
        Tracks response;
        response = stub.getTrackMetadata(request);
        try {

            response = stub.getTrackMetadata(request);
        } catch (Exception e) {
            // System.out.println("Reason: " + e.getMessage());
            throw new SpotifyClientException("Failed to get track metadata");
        }

        if (response.getTrackCount() < playlist.length) {
            throw new SpotifyClientException("Failed to get track metadata");
        }

        StringBuilder builder = new StringBuilder();
        List<Track> trackList = response.getTrackList();

        int count = 1;

        for (Track track: trackList) {
            int trackMin = track.getDuration() / 60;
            int trackSec = track.getDuration() % 60;

            builder.append(String.format("%d. %s - %s (%d:%02d)\n",
                    count++, track.getName(), track.getArtist(), trackMin, trackSec));
        }

        // return builder.toString().trim(); // trim() remove empty space (our last new line)
        return builder.toString();
    }

    public String displayAlbum(int id) throws SpotifyClientException {
        // TODO: Implement displayAlbum
        // Create stub
        MetadataServiceGrpc.MetadataServiceBlockingStub stub =
                MetadataServiceGrpc.newBlockingStub(spotifyConnection.getStub().getChannel());

        // Create request
        EntitiesRequest req_1 = EntitiesRequest
                    .newBuilder()   // create builder obj
                    .addId(id)      // add single id
                    .build();       // build an obj

        // Create response
        Albums res_1;
        Tracks res_2;
        try {
            res_1 = stub.getAlbumMetadata(req_1);

            List<Integer> trackIds = res_1.getAlbumList().get(0).getTracksList(); // only one album each call

            EntitiesRequest req_2 = EntitiesRequest
                    .newBuilder()
                    .addAllId(trackIds) // map convert album id from long to int
                    .build();
            try {
                res_2 = stub.getTrackMetadata(req_2);
            } catch (Exception e) {
                throw new SpotifyClientException("Failed to get album metadata");
            }
        } catch (Exception e) {
            throw new SpotifyClientException("Failed to get album metadata");
        }

        if (res_1.getAlbumList().isEmpty()) {
            throw new SpotifyClientException("Failed to get album metadata");
        }

        if (res_2.getTrackList().isEmpty()) {
            throw new SpotifyClientException("Failed to get album metadata");
        }

        List<Track> trackList = res_2.getTrackList();

        // int totalDuration = trackList.stream().mapToInt(track -> track.getDuration()).sum();
        // int totalDuration = trackList.stream().mapToInt(Track::getDuration).sum();

        StringBuilder builder = new StringBuilder();

        int count = 1;
        int totalDuration = 0;

        for (Track track: trackList) {
            int trackDuration = track.getDuration();
            int trackMin = trackDuration / 60;
            int trackSec = trackDuration % 60;

            builder.append(String.format("\t%d. %s - %s (%d:%02d)\n",
                    count++, track.getName(), track.getArtist(), trackMin, trackSec));

            totalDuration += trackDuration;
        }

        String header = String.format("%s (%d:%02d)\n",
                res_1.getAlbumList().get(0).getName(),
                totalDuration / 60,
                totalDuration % 60
        );

        builder.insert(0, header);

        // return builder.toString().trim();
        return builder.toString();
    }

    public static void main(String[] args) throws SpotifyClientException {
        SpotifyClient client = new SpotifyClient();

        // // Examples from Artemis
        // System.out.println(client.displayPlaylist(new int[] {82763, 2791, 80673, 62523, 61703}));
        // System.out.println(client.displayAlbum(24534));
    }
}
