package de.tum.in.ase.eist.Model;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

/*************************
 * DO NOT EDIT THIS FILE *
 *************************/

public class DatabaseHelper {

    private final String SQLITE_CONNECTION_STRING;

    private final String MFT_TABLE = "mfts";

    private final Connection conn;

    public DatabaseHelper(String databasePath) {
        this.SQLITE_CONNECTION_STRING = databasePath;
        conn = connect();
    }

    public synchronized Connection connect() {
        try {
            return DriverManager.getConnection(SQLITE_CONNECTION_STRING);
        } catch (SQLException e) {
            throw new RuntimeException("Error connecting to the database: " + e);
        }
    }

    public synchronized void initializeDatabase() {
        dropTableMft();
        try (Statement statement = conn.createStatement()) {

            String createMFTs = "CREATE TABLE IF NOT EXISTS " + MFT_TABLE + " (\n"
                    + "	id integer PRIMARY KEY,\n"
                    + "	name text NOT NULL,\n"
                    + "	description text NOT NULL,\n"
                    + "	price real\n"
                    + ");";

            statement.addBatch(createMFTs);

            statement.executeBatch();

        } catch (SQLException e) {
            throw new RuntimeException("Error initializing the database", e);
        }
    }

    public synchronized void closeConnection() {
        try {
            if (conn != null && !conn.isClosed()) {
                conn.close();
            }
        } catch (SQLException e) {
            System.err.println("Error closing the database connection: " + e.getMessage());
        }
    }


    public synchronized int insertMFT(MFT mft) {
        String sql = "INSERT INTO " + MFT_TABLE + "(id,name,description,price) VALUES(?,?,?,?)";

        try (
            PreparedStatement preparedStatement = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            preparedStatement.setInt(1, mft.getId());
            preparedStatement.setString(2, mft.getName());
            preparedStatement.setString(3, mft.getDescription());
            preparedStatement.setDouble(4, mft.getPrice());
            preparedStatement.executeUpdate();

            ResultSet resultSet = preparedStatement.getGeneratedKeys();
            if (resultSet.next()) {
                return resultSet.getInt(1);
            } else {
                return -1;
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return -1;
        }
    }

    public synchronized void dropTableMft() {
        try (Statement statement = conn.createStatement()) {

            String createMFTs = "drop table if exists " + MFT_TABLE;

            statement.addBatch(createMFTs);

            statement.executeBatch();

        } catch (SQLException e) {
            throw new RuntimeException("Error drop table" + MFT_TABLE + " failed: ", e);
        }
    }

	public synchronized MFT updateMFT(MFT mft) {
        String sql = "UPDATE " + MFT_TABLE + " SET name = ?, description = ?, price = ?  WHERE id = ?";

        try (
            PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            preparedStatement.setString(1, mft.getName());
            preparedStatement.setString(2, mft.getDescription());
            preparedStatement.setDouble(3, mft.getPrice());
            preparedStatement.setInt(4, mft.getId());

            int rows = preparedStatement.executeUpdate();

            if (rows == 1) {
                return selectMFTById(mft.getId());
            } else {
                System.err.println("Something went wrong updating MFT with ID " + mft.getId());
                return null;
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return null;
        }
    }

    public synchronized MFT selectMFTById(int id) {
        String sql = "SELECT * FROM " + MFT_TABLE + " WHERE id = ?";

        try (
            PreparedStatement preparedStatement = conn.prepareStatement(sql)) {
            preparedStatement.setInt(1, id);

            ResultSet resultSet = preparedStatement.executeQuery();

            List<MFT> mfts = parseResultToMFT(resultSet);

            return mfts.size() > 0 ? mfts.get(0) : null;
        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return null;
        }
    }

	public List<MFT> selectAll() {
        String sql = "SELECT * FROM " + MFT_TABLE;

        try {
            Statement statement = conn.createStatement();
            return parseResultToMFT(statement.executeQuery(sql));
        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return null;
        }
    }

    public List<MFT> parseResultToMFT(ResultSet resultSet) {
        List<MFT> mfts = new ArrayList<>();
        try {
            while (resultSet.next()) {
                mfts.add(new MFT(resultSet.getInt("id"), resultSet.getString("name"),
                        resultSet.getString("description"), resultSet.getDouble("price")));
            }
        } catch (SQLException e) {
            System.err.println(e.getMessage());
            return List.of();
        }

        return mfts;
    }

}
